# Заданные входные данные
team1_num = 5
team2_num = 6
score_1 = 40
score_2 = 42
team1_time = 1552.512
team2_time = 2153.31451
tasks_total = 82
time_avg = 45.2

# Определяем результат соревнования на основе входных данных
if score_1 > score_2 or (score_1 == score_2 and team1_time > team2_time):
    challenge_result = 'Победа команды Мастера кода!'
elif score_1 < score_2 or (score_1 == score_2 and team1_time < team2_time):
    challenge_result = 'Победа команды Волшебники данных!'
else:
    challenge_result = 'Ничья!'

# 1. Форматирование с использованием %
# Форматирование строки с количеством участников первой команды
team1_message = "В команде Мастера кода участников: %d !" % team1_num
print(team1_message)

# Форматирование строки с количеством участников обеих команд
teams_message = "Итого сегодня в командах участников: %d и %d !" % (team1_num, team2_num)
print(teams_message)

# 2. Форматирование с использованием format()
# Форматирование строки с количеством задач, решённых командой 2
score_message = "Команда Волшебники данных решила задач: {} !".format(score_2)
print(score_message)

# Форматирование строки с временем решения задач командой 2
team2_time_message = "Волшебники данных решили задачи за {:.1f} с !".format(team2_time)
print(team2_time_message)

# 3. Форматирование с использованием f-строк
# Форматирование строки с количеством решённых задач по командам
scores_message = f"Команды решили {score_1} и {score_2} задач."
print(scores_message)

# Форматирование строки с результатом соревнования
result_message = f"Результат битвы: {challenge_result}"
print(result_message)

# Форматирование строки с общим количеством задач и средним временем на задачу
tasks_message = f"Сегодня было решено {tasks_total} задач, в среднем по {time_avg:.1f} секунды на задачу!"
print(tasks_message)

# Подробные комментарии:
# 1. Оператор % используется для простого форматирования строк. Мы применяем спецификаторы %d для целых чисел и %f (с округлением) для вещественных.
# 2. Метод .format() позволяет подставлять значения в строку с помощью плейсхолдеров {}. Удобно для сложного форматирования.
# 3. F-строки (f-strings) - это современный способ форматирования строк в Python. Позволяют вставлять выражения и переменные прямо внутрь строки, что делает код более читаемым.
# 4. В переменной challenge_result результат определяется на основе условий, сравнивающих результаты и время выполнения задач двумя командами.
